def parseXml(xmlRunParametersPath, xmlRunInfoPath, instrument, readLengths):
    RTAVersion = "Unknown"
    flowcell = "Unknown"
    workFlowTypeValue = "Unknown"
    flowcellModeValue = "Unknown"
    chemistryValue = "Unknown"
    chemistryVersionValue = "Unknown"
    xmldoc = minidom.parse(xmlRunParametersPath)
    tagRTA = ""
    if instrument == "NovaSeq 6000" or instrument == "NextSeq 2000" or instrument == "iSeq":
        tagRTA = "RtaVersion"
    elif instrument == "HiSeq" or  instrument == "NextSeq 550" or instrument == "MiSeq":
        tagRTA = "RTAVersion"
    elif instrument == "NovaSeq Xplus":
        RTAVersion = "RTA4"
    if tagRTA:
        cyc = xmldoc.getElementsByTagName(tagRTA)
    else:
        cyc = []
    if len(cyc) > 0:
        RTAVersion = cyc[0].childNodes[0].nodeValue
    workFlowType = xmldoc.getElementsByTagName('WorkflowType')
    if len(workFlowType) > 0:
        workFlowTypeValue = workFlowType[0].childNodes[0].nodeValue
    flowcellMode = xmldoc.getElementsByTagName('FlowCellMode')
    if len(flowcellMode) > 0:
        flowcellModeValue = flowcellMode[0].childNodes[0].nodeValue
    chemistry = xmldoc.getElementsByTagName('Chemistry')
    if len(chemistry) > 0:
        chemistryValue = chemistry[0].childNodes[0].nodeValue
    chemistryVersion = xmldoc.getElementsByTagName('ChemistryVersion')
    if len(chemistryVersion) > 0:
        chemistryVersionValue = chemistryVersion[0].childNodes[0].nodeValue
    consumableInfo = xmldoc.getElementsByTagName('ConsumableInfo')
    if len(consumableInfo) > 0:
        for consumableInfoIndex in range(len(consumableInfo)):
            if consumableInfo[consumableInfoIndex].getElementsByTagName('Type')[0].childNodes[0].nodeValue == 'FlowCell':
                if len(consumableInfo[consumableInfoIndex].getElementsByTagName('Name')) > 0:
                    flowcellModeValue = consumableInfo[consumableInfoIndex].getElementsByTagName('Name')[0].childNodes[0].nodeValue
                else:
                    flowcellModeValue = consumableInfo[consumableInfoIndex].getElementsByTagName('Mode')[0].childNodes[0].nodeValue
            else:
                continue

    xmldoc = minidom.parse(xmlRunInfoPath)
    runInfoReads = xmldoc.getElementsByTagName('Read')
    if len(runInfoReads) > 0:
        for runInfoRead in runInfoReads:
            if runInfoRead.getAttribute("IsIndexedRead") == "N":
                readLengths.append(runInfoRead.getAttribute("NumCycles"))
    runInfoFlowcell = xmldoc.getElementsByTagName('Flowcell')
    if len(runInfoFlowcell) > 0:
        flowcell = runInfoFlowcell[0].childNodes[0].nodeValue
    return (RTAVersion, flowcell, workFlowTypeValue, flowcellModeValue, chemistryValue, chemistryVersionValue)

def getRunPath(sRunName):
    instrument = ''
    runPath = ''
    if sRunName.group(2)[0] == "A":
        instrument = "NovaSeq 6000"
        if os.path.isdir(os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData", sRunName.group(0))):
            runPath = os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData")
        elif os.path.isdir(os.path.join('/mnt/ccrsf-raw/illumina', "RawData_NovaSeq", sRunName.group(0))):
            runPath = os.path.join('/mnt/ccrsf-raw/illumina', "RawData_NovaSeq")
    elif sRunName.group(2)[0] == "L":
        instrument = "NovaSeq Xplus"
        if os.path.isdir(os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData", sRunName.group(0))):
            runPath = os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData")
        elif os.path.isdir(os.path.join('/mnt/ccrsf-raw/illumina', "RawData_Xplus", sRunName.group(0))):
            runPath = os.path.join('/mnt/ccrsf-raw/illumina', "RawData_Xplus")
    elif sRunName.group(2)[0] == "J" or sRunName.group(2)[0] == "D":
        instrument = "HiSeq"
        if os.path.isdir(os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData", sRunName.group(0))):
            runPath = os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData")
        elif os.path.isdir(os.path.join('/mnt/ccrsf-raw/illumina', "RawData_HiSeq", sRunName.group(0))):
            runPath = os.path.join('/mnt/ccrsf-raw/illumina', "RawData_HiSeq")
    elif sRunName.group(2)[0] == "N":
        instrument = "NextSeq 550"
        if os.path.isdir(os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData_NextSeq", sRunName.group(0))):
            runPath = os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData_NextSeq")
        elif os.path.isdir(os.path.join('/mnt/ccrsf-raw/illumina', "RawData_NextSeq", sRunName.group(0))):
            runPath = os.path.join('/mnt/ccrsf-raw/illumina', "RawData_NextSeq")
    elif sRunName.group(2)[0] == "V":
        instrument = "NextSeq 2000"
        if os.path.isdir(os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData_NextSeq", sRunName.group(0))):
            runPath = os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData_NextSeq")
        elif os.path.isdir(os.path.join('/mnt/ccrsf-raw/illumina', "RawData_NextSeq", sRunName.group(0))):
            runPath = os.path.join('/mnt/ccrsf-raw/illumina', "RawData_NextSeq")
    elif sRunName.group(2)[0] == "M":
        instrument = "MiSeq"
        if os.path.isdir(os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData_MiSeq", sRunName.group(0))):
            runPath = os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData_MiSeq")
        elif os.path.isdir(os.path.join('/mnt/ccrsf-raw/illumina', "RawData_MiSeq", sRunName.group(0))):
            runPath = os.path.join('/mnt/ccrsf-raw/illumina', "RawData_MiSeq")
    elif sRunName.group(2)[0] == "F":
        instrument = "iSeq"
        if os.path.isdir(os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData_iSeq", sRunName.group(0))):
            runPath = os.path.join('/is2/projects/CCR-SF/scratch/illumina', "RawData_iSeq")
        elif os.path.isdir(os.path.join('/mnt/ccrsf-raw/illumina', "RawData_iSeq", sRunName.group(0))):
            runPath = os.path.join('/mnt/ccrsf-raw/illumina', "RawData_iSeq")
    return(instrument, runPath)

def runParametersXmlPath(run_name):
    instrument = "Unknown"
    readLengths = []
    flowcell = "Unknown"
    workFlowType = "Unknown"
    flowcellMode = "Unknown"
    chemistry = "Unknown"
    chemistryVersion = "Unknown"
    RTAVersion = "Unknown"
    #rawDataPath = "/is2/projects/CCR-SF/scratch/illumina"
    runPath = ""
    xmlRunParametersPath = "" 
    xmlRunInfoPath = ""
    oRunName = re.compile("(\d{6,})_([A-Z0-9]+)_(\d+)_([-A-Z0-9]+)")
    sRunName = oRunName.search(run_name)
    #if sRunName and len(glob.glob(os.path.join(rawDataPath, "RawData", run_name, "[rR]unParameters.xml"))) != 0:
    if sRunName:
        (instrument, runPath) = getRunPath(sRunName)
        if os.path.isdir(os.path.join(runPath, run_name)):
            xmlRunParametersPath = glob.glob(os.path.join(runPath, run_name, "[rR]unParameters.xml"))[0]
            xmlRunInfoPath = glob.glob(os.path.join(runPath, run_name, "[rR]unInfo.xml"))[0]
            (RTAVersion, flowcell, workFlowType, flowcellMode, chemistry, chemistryVersion) = parseXml(xmlRunParametersPath, xmlRunInfoPath, instrument, readLengths)
            if flowcellMode == 'NextSeq 2000 P3 Flow Cell Cartridge':
                flowcellMode = 'P3'
            elif flowcellMode == 'NextSeq 1000/2000 P2 Flow Cell Cartridge':
                flowcellMode = 'P2'
    else:
        sys.stdout.write("The run name is not recognized from the current command.\n")
        sys.stdout.write("Please assign the run name correctly and re-run the command.\n")
    return(RTAVersion, flowcell, workFlowType, flowcellMode, chemistry, chemistryVersion, xmlRunParametersPath, xmlRunInfoPath)
